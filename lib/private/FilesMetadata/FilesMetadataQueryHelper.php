<?php

declare(strict_types=1);

namespace OC\FilesMetadata;

use OC\FilesMetadata\Service\IndexRequestService;
use OC\FilesMetadata\Service\MetadataRequestService;
use OCP\DB\QueryBuilder\IQueryBuilder;
use OCP\FilesMetadata\IFilesMetadataQueryHelper;
use OCP\FilesMetadata\Model\IFilesMetadata;

class FilesMetadataQueryHelper  {
	public function __construct() {
	}

	public function linkedToFileId(
		IQueryBuilder $queryBuilder,
		string $fileTableAlias,
		string $fileIdField
	): void {
		// leftJoin metadata in fileid=fileid
		// add json to the select in specific templated alias
	}

	public function limitToSingleMetadata(
		IQueryBuilder $qb,
		string $fileTableAlias,
		string $fileIdField,
		string $metadataKey,
		string $metadataValue,
		bool $selectMetadata = false,
	): void {
		$expr = $qb->expr();
		if ($selectMetadata) {
			$qb->selectAlias('meta.json', 'meta_json');
		}

		$qb->leftJoin(
			$fileTableAlias, IndexRequestService::TABLE_METADATA_INDEX, 'meta_index',
			$expr->eq('meta_index.file_id', $fileTableAlias . '.' . $fileIdField)
		)
		   ->andwhere(
		   	$expr->andX(
		   		$expr->eq('meta_index.meta_key', $qb->createNamedParameter($metadataKey)),
		   		$expr->eq('meta_index.meta_value', $qb->createNamedParameter($metadataValue))
		   	)
		   );

		if ($selectMetadata) {
			$qb->leftJoin(
				'meta_index', MetadataRequestService::TABLE_METADATA, 'meta',
				$expr->eq('meta_index.file_id', 'meta.file_id')
			);
		}
	}


	public function limitToSingleMetadataInt(
		IQueryBuilder $qb,
		string $fileTableAlias,
		string $fileIdField,
		string $metadataKey,
		int $metadataValue,
		bool $selectMetadata = false,
		string $exprType = 'eq'
	): void {
		$expr = $qb->expr();
		if ($selectMetadata) {
			$qb->selectAlias('meta.json', 'meta_json');
		}

		$qb->leftJoin(
			$fileTableAlias, IndexRequestService::TABLE_METADATA_INDEX, 'meta_index',
			$expr->eq('meta_index.file_id', $fileTableAlias . '.' . $fileIdField)
		)
		   ->andwhere(
		   	$expr->andX(
		   		$expr->eq('meta_index.meta_key', $qb->createNamedParameter($metadataKey)),
		   		$expr->$exprType('meta_index.meta_value', $qb->createNamedParameter($metadataValue, IQueryBuilder::PARAM_INT))
		   	)
		   );

		if ($selectMetadata) {
			$qb->leftJoin(
				'meta_index', MetadataRequestService::TABLE_METADATA, 'meta',
				$expr->eq('meta_index.file_id', 'meta.file_id')
			);
		}
	}

	/**
	 * @param array $data
	 *
	 * @return IFilesMetadata
	 */
	public function extractMetadata(array $data): IFilesMetadata {
		$json = '[]'; // from $data, in an alias field generated by limitToSingleMetadata()
		$fileId = 1; // from $data, in an alias field generated by limitToSingleMetadata()

		$metadata = new FilesMetadata($fileId);
		$metadata->import($json);

		return $metadata;
	}
}
